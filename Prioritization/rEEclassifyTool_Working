/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Upland_Species = ee.Image("users/esimonson/Prioritization/Upland_Species"),
    Wetland_Species = ee.Image("users/esimonson/Prioritization/Wetland_Species_SEGAP"),
    Resilience = ee.Image("users/esimonson/Prioritization/TNC_Climate_Resilience"),
    TSPF = ee.Image("users/esimonson/Prioritization/TSPF_94to19"),
    EVT = ee.Image("users/esimonson/Prioritization/ExistingVegType"),
    DistToCL = ee.Image("users/esimonson/Prioritization/DistToCL"),
    LLL = ee.FeatureCollection("users/esimonson/Prioritization/LLL"),
    LC_Vulnerability = ee.Image("users/esimonson/Prioritization/CLabs_Vulnerability"),
    AOIs = ee.FeatureCollection("users/esimonson/Prioritization/LLL_Regional_Boundaries"),
    LLL_Counties = ee.FeatureCollection("users/esimonson/Prioritization/LLL_Counties"),
    Permit_Density = ee.Image("users/esimonson/LLL_BurnPermit_Density"),
    Longleaf = ee.Image("users/esimonson/SDM/Longleaf_Occurrence"),
    PublicLands = ee.FeatureCollection("users/esimonson/Prioritization/LLL_ProtecredAreas_Final"),
    NoData = ee.Image("users/esimonson/SE_FHM/FireLayer_1994_90BP_SE");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// DATA PRE-PROCESSING

// CREATE BLANK (NO DATA) IMAGE FOR UI
var NoDataMask = NoData.gt(1)
var NoData = NoData.updateMask(NoDataMask)

// ENSURE THAT NODATA AREAS ARE UNMASKED
TSPF = TSPF.unmask(0)
Longleaf = Longleaf.unmask(0)
DistToCL = DistToCL.unmask(7)

// RECLASSIFY SOURCE RASTERS
var Permits_reclass = Permit_Density.remap([1,2,3,4,5,6,7,8,9,10,11],[1,2,3,3,4,4,5,5,5,5,5])
var TSPF_reclass = TSPF.remap([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0],[1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,0])

// CREATE A LIST OF AOIs
var PublicLandsNames = PublicLands.aggregate_array('property_n').distinct().sort()
var AOINames = AOIs.aggregate_array('NAME')
print(AOINames)

// DEFINE AOIs
var district_list = ee.List(['FFS District: Blackwater', 'FFS District: Chipola', 'FFS District: Tallahassee']);
var LIT_list = ee.List(['Apalachicola Regional Stewardship Alliance','Gulf Coastal Plain Ecosystem Partnership'])
var districts = AOIs.filter(ee.Filter.inList('NAME', district_list))
var LIT = AOIs.filter(ee.Filter.inList('NAME', LIT_list))

// AOI VISUALIZATION
var empty = ee.Image().byte();

var districts_outline = empty.paint({
  featureCollection: districts,
  color: 1,
  width: 2
});

var LIT_outline = empty.paint({
  featureCollection: LIT,
  color: 1,
  width: 2
});

var LLL_outline = empty.paint({
  featureCollection: LLL,
  color: 1,
  width: 2
});

var Counties_outline = empty.paint({
  featureCollection: LLL_Counties,
  color: 1,
  width: 2
});

// CREATE LAYERS FROM THE AOIs
var District_lyr = ui.Map.Layer(districts_outline, {palette: '301934'}, 'FFS Districts');
var LIT_lyr = ui.Map.Layer(LIT_outline, {palette: '8B0000'}, 'LIT Boundaries');
var LLL_lyr = ui.Map.Layer(LLL_outline, {palette: '006400'}, 'Longleaf Legacy Landscape');
var Counties_lyr = ui.Map.Layer(Counties_outline, {palette: '000000'}, 'County Boundaries');


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MAP PANEL CONFIGURATION //

// CREATE A MAP PANEL, DEFINE STYLE PREFERENCES, SET AS DEFAULT MAP
var mapPanel = ui.Map();
mapPanel.setOptions('HYBRID');
mapPanel.style().set('cursor', 'crosshair');
ui.root.widgets().reset([mapPanel]);

// ADD BASE LAYERS TO THE MAP, WITH ALL LAYERS HIDDEN INITIALLY
mapPanel.addLayer(LLL,{},'LLL',false)
mapPanel.add(District_lyr,{},'FFS Districts')
mapPanel.add(LIT_lyr,{},'LIT Boundaries')
mapPanel.add(LLL_lyr,{},'Longleaf Legacy Landscape')
mapPanel.add(Counties_lyr,{},'County Boundaries')
mapPanel.addLayer(NoData,{},'Public Lands Selection',false)
District_lyr.setShown(false);LIT_lyr.setShown(false);LLL_lyr.setShown(false);Counties_lyr.setShown(false);

// CENTER THE MAP AROUND THE LONGLEAF LEGACY LANDSCAPE
mapPanel.centerObject(LLL,8)

// LABELS
var header = ui.Label('Prioritization Modeling Tool', {fontSize: '24px', color: 'green'});
var text = ui.Label('A web-interface for building prioritization models for the Longleaf Legacy Landscape',{fontSize: '11px'});
var green_line = ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},})

// TTLC LOGO
var logo = ee.Image("users/esimonson/Logos/TTRS_TTLC_Logo");
var branding = ui.Thumbnail({image:logo,params:{bands:['b1','b2','b3'],min:0,max:255},style:{width:'260px',height:'100px'}});

// CREATE A TOOL PANEL AND INTEGRATE IT INTO THE MAP
var toolPanel = ui.Panel({
  widgets : ([header, branding, text, green_line]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '330px'}
});
ui.root.widgets().add(toolPanel);

// CREATE A LIST TO SELECT FROM AVAILABLE RASTER LATERS
var layers = ee.List(['Upland Species', 'TNC Climate Resilience', 'Distance to Conservation Lands', 'Existing Vegetation Type','Time Since Previous Fire'])
var layers2 = ee.List(['Wetland Species', 'TNC Climate Resilience', 'Distance to Conservation Lands', 'Existing Vegetation Type'])
var layers3 = ee.List(['Longleaf Occurence','Time Since Previous Fire','Burn Permit Hot Spots','Upland Species','Distance to Conservation Lands','Existing Vegetation Type'])
var scenarios = ['Upland Prioritization','Wetland Prioritization','Private Lands Burn Team']

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SELECTION WIDGET THAT REPONDS TO USER INPUT
// ON CHANGE FUNCTION WILL RENDER A CLASIFICATION PANEL FOR EACH LAYER
var select = ui.Select({
  //items: layers,
  placeholder: ('Model Inputs...'),
  style: {width: '200px'},
  onChange: function(keys) {
    if (keys == "Upland Species"){
      Panel.clear().add(reclassPanel_UplandSpecies)
    }
    if (keys == "Wetland Species"){
      Panel.clear().add(reclassPanel_WetlandSpecies)
    }
    if (keys == "TNC Climate Resilience"){
      Panel.clear().add(reclassPanel_ClimateResilience)
    }
    if (keys == "Distance to Conservation Lands"){
      Panel.clear().add(reclassPanel_DistToCL)
    }
    if (keys == "Existing Vegetation Type"){
      Panel.clear().add(reclassPanel_EVT)
    }
    if (keys == "Time Since Previous Fire"){
      Panel.clear().add(reclassPanel_TSPF)
    }
    if (keys == "Longleaf Occurence"){
      Panel.clear().add(reclassPanel_Longleaf)
    }
    if (keys == "Burn Permit Hot Spots"){
      Panel.clear().add(reclassPanel_BurnPermits)
    }
    if (keys == "Land Change Vulnerability"){
      Panel.clear().add(reclassPanel_LCVulnerability)
    }
}
});

// SELECT MODELING SCENARIO WIDGET
// FUNCTION SETS THE ITEMS OF THE LAYER SELECT WIDGET AND SETS THE FINAL WEIGHT LABEL
var select2 = ui.Select({
  items: scenarios,
  placeholder: 'Select a Modeling Scenario...',
  style: {width: '200px'},
  onChange: function(keys){
    var weight1 = weightslider1.getValue()
    var weight2 = weightslider2.getValue()
    var weight3 = weightslider3.getValue()
    var weight4 = weightslider4.getValue()
    var weight5 = weightslider5.getValue()
    var weight6 = weightslider6.getValue()
    var weight7 = weightslider7.getValue()
    var weight8 = weightslider8.getValue()
    var weight9 = weightslider9.getValue()
                
    // FUNCTION TO ADD SELECTED COUNTY NAMES TO ITEMS (LIST) OF THE COUNTY SELECT WIDGET
    if (keys === "Upland Prioritization") {
      var selectedLayerNames = layers
      Panel.clear().add(reclassPanel_UplandSpecies)
      var finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      weightLabel.setValue(finalweight)
    }
    if (keys === "Wetland Prioritization") {
      selectedLayerNames = layers2
      Panel.clear().add(reclassPanel_WetlandSpecies)
      finalweight = (weight2 + weight3 + weight4 + weight5)
      weightLabel.setValue(finalweight)
    }
    if (keys === "Private Lands Burn Team") {
      selectedLayerNames = layers3
      Panel.clear().add(reclassPanel_Longleaf)
      finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      weightLabel.setValue(finalweight)
    }
    selectedLayerNames.evaluate(function(values) {
    select.items().reset(values);
    select.setValue(values[0], false);
})
  }
  
})
// ADD THE SELECTION WIDGETS TO THE TOOL PANEL
toolPanel.add(ui.Label('Set Model Parameters', {'font-size': '20px'}));
toolPanel.add(select2)
toolPanel.add(select)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SLIDER SECTION //

// UPLAND SPECIES
var slider1 = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider2 = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider3 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider4 = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider5 = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider6 = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider1 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      
      if (select2.getValue() == "Upland Prioritization") {
        var finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      if (select2.getValue() == "Private Lands Burn Team") {
        finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      }

      weightLabel.setValue(finalweight)
  return value} });

// WETLAND SPECIES
var slider7  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider8  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider9  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider10 = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider11 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider12 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider13 = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider14 = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider15 = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider2 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      
      var finalweight = (weight2 + weight3 + weight4 + weight5)
      weightLabel.setValue(finalweight)
  return value} });

// TNC CLIMATE RESILIENCE
var slider16  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider17  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider18  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider19  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider20  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider21  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider22  = ui.Slider({min:1, max: 9, value: 2, step: 1, onChange: function(value) {return value} });
var slider23  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider23a = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider3 = ui.Slider({min:5, max: 100, value: 15, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()  
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue() 
      
      if (select2.getValue() == "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      weightLabel.setValue(finalweight)
  return value} });

// DISTANCE TO CONSERVATION LANDS
var slider24  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider25  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider26  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider27  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider28  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider29  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider30  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider30a = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider4 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      
      if (select2.getValue() == "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      if (select2.getValue() == "Private Lands Burn Team") {
        finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      }
      weightLabel.setValue(finalweight)
  return value} });

// EXISTING VEGETATION TYPE
var slider31  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider32  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider33  = ui.Slider({min:1, max: 9, value: 2, step: 1, onChange: function(value) {return value} });
var slider34  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider35  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider36  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider37  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider38  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider39  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider40  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider41  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider42  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider43  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var weightslider5 = ui.Slider({min:5, max: 100, value: 20, step: 5, 
    onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      
      if (select2.getValue() == "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      if (select2.getValue() == "Private Lands Burn Team") {
        finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      }
      weightLabel.setValue(finalweight)
  return value} });

// TIME SINCE PREVIOUS FIRE
var slider44  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider45  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider46  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider47  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider48  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider49  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider50  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider6 = ui.Slider({min:5, max: 100, value: 25, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      
      if (select2.getValue() == "Upland Prioritization") {
        var finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      if (select2.getValue() == "Private Lands Burn Team") {
        finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      }
      weightLabel.setValue(finalweight)
  return value} });
  
// LONGLEAF OCCURENCE
var slider51  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider52  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider7 = ui.Slider({min:5, max: 100, value: 25, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      var finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      weightLabel.setValue(finalweight)
  return value} });

// BURN PERMIT HOT SPOTS
var slider53  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider54  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider55  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider56  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider57  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider8 = ui.Slider({min:5, max: 100, value: 25, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var weight7 = weightslider7.getValue()
      var weight8 = weightslider8.getValue()
      var weight9 = weightslider9.getValue()
      var finalweight = (weight1 + weight4 + weight5 + weight6 + weight7 + weight8)
      weightLabel.setValue(finalweight)
  return value} });

// LAND CHANGE VULNERABILITY
var slider58  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider59  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider60  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider61  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider62  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider63  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider64  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider65  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider66  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider67  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider68  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var weightslider9 = ui.Slider({min:5, max: 100, value: 25, step: 5, onChange: function(value) {

  return value} });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// PANEL CONFIGURATION //

var textPanel_UplandSpecies = ui.Panel({
  widgets : ([ui.Label('0 overlapping habitats'),ui.Label('1 overlapping habitats'),ui.Label('2 overlapping habitats'),
              ui.Label('3 overlapping habitats'),ui.Label('4 overlapping habitats'),ui.Label('5 overlapping habitats'),
              ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_WetlandSpecies = ui.Panel({
  widgets : ([ui.Label('0 overlapping habitats'),ui.Label('1 overlapping habitats'),ui.Label('2 overlapping habitats'),
              ui.Label('3 overlapping habitats'),ui.Label('4 overlapping habitats'),ui.Label('5 overlapping habitats'),
              ui.Label('6 overlapping habitats'),ui.Label('7 overlapping habitats'),ui.Label('8 overlapping habitats'),
              ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_ClimateResilience = ui.Panel({
  widgets : ([ui.Label('Far Above Average'),ui.Label('Above Average'),
              ui.Label('Slightly Above Average'),ui.Label('Average'),ui.Label('Slightly Below Average'),
              ui.Label('Below Average'),ui.Label('Far Below Average'),ui.Label('Developed'),ui.Label('Open Water'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_DistToCL = ui.Panel({
  widgets : ([ui.Label('Within 0.25 Miles'),ui.Label('Within 0.5 Miles'),
              ui.Label('Within 1 Mile'),ui.Label('Within 2 Miles'),ui.Label('Within 3 Miles'),
              ui.Label('Within 4 Miles'),ui.Label('Within 5 Miles'),ui.Label('Greater Than 5 Miles'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_EVT = ui.Panel({
  widgets : ([ui.Label('No Data'),ui.Label('Urban'),ui.Label('Open Water'),ui.Label('Wetland'),
              ui.Label('Coastal Wetland'),ui.Label('Forested Wetland'),ui.Label('Mixed Pine Hardwood'),
              ui.Label('Planted Pine'),ui.Label('Pine Flatwoods'),ui.Label('Upland/Planted Pine'),
              ui.Label('Upland Hardwood'),ui.Label('Upland Pine'),ui.Label('Field/Pasture/Ag'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_TSPF = ui.Panel({
  widgets : ([ui.Label('1-3 years'),ui.Label('4-6 years'),ui.Label('7-10 years'),ui.Label('11-15 years'),
              ui.Label('16-20 years'),ui.Label('21-26 years'),ui.Label('No Fire Detected'), ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_Longleaf = ui.Panel({
  widgets : ([ui.Label('Unknown/Absent'),ui.Label('Longleaf Presence'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_BurnPermits = ui.Panel({
  widgets : ([ui.Label('No Hot Spots'),ui.Label('Clustering Begins'),ui.Label('Hot Spot Zone 1'),
  ui.Label('Hot Spot Zone 2'),ui.Label('Hot Spot Zone 3'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_LCVulnerability = ui.Panel({
  widgets : ([ui.Label('0% (water,urban,ag)'),ui.Label('1-10%'),ui.Label('10-20%'),ui.Label('20-30%'),
  ui.Label('30-40%'),ui.Label('40-50%'),ui.Label('50-60%'),ui.Label('60-70%'),ui.Label('70-80%'),ui.Label('80-90%'),ui.Label('90-100%'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var sliderPanel_UplandSpecies = ui.Panel({
  widgets : ([slider1,slider2,slider3,slider4,slider5,slider6,weightslider1]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_WetlandSpecies = ui.Panel({
  widgets : ([slider7,slider8,slider9,slider10,slider11,slider12,slider13,slider14,slider15,weightslider2]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_ClimateResilience = ui.Panel({
  widgets : ([slider16,slider17,slider18,slider19,slider20,slider21,slider22,slider23,slider23a,weightslider3]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_DistToCL = ui.Panel({
  widgets : ([slider24,slider25,slider26,slider27,slider28,slider29,slider30,slider30a,weightslider4]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_EVT = ui.Panel({
  widgets : ([slider31,slider32,slider33,slider34,slider35,slider36,slider37,slider38,slider39,slider40,slider41,slider42,slider43,weightslider5]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_TSPF = ui.Panel({
  widgets : ([slider44,slider45,slider46,slider47,slider48,slider49,slider50,weightslider6]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_Longleaf = ui.Panel({
  widgets : ([slider51,slider52,weightslider7]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_BurnPermits = ui.Panel({
  widgets : ([slider53,slider54,slider55,slider56,slider57,weightslider8]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_LCVulnerability = ui.Panel({
  widgets : ([slider58,slider59,slider60,slider61,slider62,slider63,slider64,slider65,slider66,slider67,slider68,weightslider9]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var reclassPanel_UplandSpecies = ui.Panel({
  widgets: ([textPanel_UplandSpecies, sliderPanel_UplandSpecies]),
  layout: ui.Panel.Layout.flow('horizontal'),
  style: {shown: true}
})

var reclassPanel_WetlandSpecies = ui.Panel({
  widgets: ([textPanel_WetlandSpecies, sliderPanel_WetlandSpecies]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_ClimateResilience = ui.Panel({
  widgets: ([textPanel_ClimateResilience, sliderPanel_ClimateResilience]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_DistToCL = ui.Panel({
  widgets: ([textPanel_DistToCL, sliderPanel_DistToCL]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_EVT = ui.Panel({
  widgets: ([textPanel_EVT, sliderPanel_EVT]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_TSPF = ui.Panel({
  widgets: ([textPanel_TSPF, sliderPanel_TSPF]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_Longleaf = ui.Panel({
  widgets: ([textPanel_Longleaf, sliderPanel_Longleaf]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_BurnPermits = ui.Panel({
  widgets: ([textPanel_BurnPermits, sliderPanel_BurnPermits]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_LCVulnerability = ui.Panel({
  widgets: ([textPanel_LCVulnerability, sliderPanel_LCVulnerability]),
  layout: ui.Panel.Layout.flow('horizontal')
})

// CREATE A PANEL THAT WILL BE USED TO DYNAMICALLY LOAD A RECLASSIFICATION PANEL FOR EACH LAYER
var Panel = ui.Panel()
toolPanel.add(Panel)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// BUTTON TO RUN THE PRIORITIZATION MODEL
// TAKES INTO ACCOUNT ALL LAYER RANKS/WEIGHTS
// APPLIES WEIGHTED OVERLAY FUNCTION TO PRODUCE FINAL SPATIAL OUTPUT
var button = ui.Button({
  label: 'Run Prioritization Model',
  onClick: function(){
    
      if (!legend.style().get('shown')) {
  legend.style().set('shown', true);
  }
    
    // RANKS
    var rank1  = slider1.getValue();  var rank2 = slider2.getValue();   var rank3 = slider3.getValue();   var rank4 = slider4.getValue();
    var rank5  = slider5.getValue();  var rank6 = slider6.getValue();   var rank7 = slider7.getValue();   var rank8 = slider8.getValue();
    var rank9  = slider9.getValue();  var rank10 = slider10.getValue(); var rank11 = slider11.getValue(); var rank12 = slider12.getValue();
    var rank13 = slider13.getValue(); var rank14 = slider14.getValue(); var rank15 = slider15.getValue(); var rank16 = slider16.getValue();
    var rank17 = slider17.getValue(); var rank18 = slider18.getValue(); var rank19 = slider19.getValue(); var rank20 = slider20.getValue();
    var rank21 = slider21.getValue(); var rank22 = slider22.getValue(); var rank23 = slider23.getValue(); var rank24 = slider24.getValue();
    var rank25 = slider25.getValue(); var rank26 = slider26.getValue(); var rank27 = slider27.getValue(); var rank28 = slider28.getValue();
    var rank29 = slider29.getValue(); var rank30 = slider30.getValue(); var rank31 = slider31.getValue(); var rank32 = slider32.getValue();
    var rank33 = slider33.getValue(); var rank34 = slider34.getValue(); var rank35 = slider35.getValue(); var rank36 = slider36.getValue();
    var rank37 = slider37.getValue(); var rank38 = slider38.getValue(); var rank39 = slider39.getValue(); var rank40 = slider40.getValue();
    var rank41 = slider41.getValue(); var rank42 = slider42.getValue(); var rank43 = slider43.getValue(); var rank44 = slider44.getValue();
    var rank45 = slider45.getValue(); var rank46 = slider46.getValue(); var rank47 = slider47.getValue(); var rank48 = slider48.getValue();
    var rank49 = slider49.getValue(); var rank50 = slider50.getValue(); var rank23a = slider23a.getValue(); var rank30a = slider30a.getValue(); 
    var rank51 = slider51.getValue(); var rank52 = slider52.getValue(); var rank53 = slider53.getValue(); var rank54 = slider54.getValue();
    var rank55 = slider55.getValue(); var rank56 = slider56.getValue(); var rank57 = slider57.getValue(); var rank58 = slider58.getValue();
    var rank59 = slider59.getValue(); var rank60 = slider60.getValue(); var rank61 = slider61.getValue(); var rank62 = slider62.getValue();
    var rank63 = slider63.getValue(); var rank64 = slider64.getValue(); var rank65 = slider65.getValue(); var rank66 = slider66.getValue();
    var rank67 = slider67.getValue(); var rank68 = slider68.getValue(); 
    
    // WEIGHTS
    var weight1 = weightslider1.getValue(); var weight2 = weightslider2.getValue(); var weight3 = weightslider3.getValue();
    var weight4 = weightslider4.getValue(); var weight5 = weightslider5.getValue(); var weight6 = weightslider6.getValue();
    var weight7 = weightslider7.getValue(); var weight8 = weightslider8.getValue(); var weight9 = weightslider9.getValue();
    
    // LISTS
    var list1 = [rank1,rank2,rank3,rank4,rank5,rank6]; // UPLAND SPECIES
    var list2 = [rank7,rank8,rank9,rank10,rank11,rank12,rank13,rank14,rank15]; // WETLAND SPECIES
    var list3 = [rank16,rank17,rank18,rank19,rank20,rank21,rank22,rank23,rank23a]; // CLIMATE RESILIENCE
    var list4 = [rank24,rank25,rank26,rank27,rank28,rank39,rank30,rank30a]; // DISTANCE TO CONSERVATION LANDS
    var list5 = [rank31,rank32,rank33,rank34,rank35,rank36,rank37,rank38,rank39,rank40,rank41,rank42,rank43]; // EXISTING VEGETATION TYPE
    var list6 = [rank44,rank45,rank46,rank47,rank48,rank49,rank50]; // TIME SINCE PREVIOUS FIRE
    var list7 = [rank51,rank52] // LONGLEAF
    var list8 = [rank53,rank54,rank55,rank56,rank57] // PERMIT DENSITY
    var list9 = [rank58,rank59,rank60,rank61,rank62,rank63,rank64,rank65,rank66,rank67,rank68] // LAND CHANGE VULNERABILITY
    
    var label1 = ui.Label("Upland Species:") 
    var label2 = ui.Label("0 overlapping habitats - "+rank1)
    var label3 = ui.Label("1 - "+rank2)
    var label4 = ui.Label("2 - "+rank3)
    var label5 = ui.Label("3 - "+rank4)
    var label6 = ui.Label("4 - "+rank5)
    var label7 = ui.Label("5 - "+rank6)
    var label8 = ui.Label("Weight: "+weight1)
    
    // RECLASSIFY SOURCE RASTER USING LIST
    var Upland_Reclass = Upland_Species.remap([0,1,2,3,4,5],list1)
    var Wetland_Reclass = Wetland_Species.remap([0,1,2,3,4,5,6,7,8],list2)
    var Resilience_Reclass = Resilience.remap([8,7,6,5,4,3,2,1,128],list3)
    var DistToCL_Reclass = DistToCL.remap([0,1,2,3,4,5,6,7],list4)
    var EVT_Reclass = EVT.remap([0,1,2,3,4,5,6,7,8,9,10,11,12],list5)
    var TSPF_Reclass = TSPF_reclass.remap([1,2,3,4,5,6,0],list6)
    var Longleaf_Reclass = Longleaf.remap([0,1],list7)
    var Permits_Reclass = Permits_reclass.remap([1,2,3,4,5],list8)
    
    if (select2.getValue() == "Wetland Prioritization"){
      var weighted_overlay = (Wetland_Reclass.multiply(weight2)).add(Resilience_Reclass.multiply(weight3)).add(DistToCL_Reclass.multiply(weight4))
                                                             .add(EVT_Reclass.multiply(weight5))
      var out = weighted_overlay.multiply(.01)//.toInt()  
    }
    if (select2.getValue() == "Upland Prioritization") {
      weighted_overlay = (Upland_Reclass.multiply(weight1)).add(Resilience_Reclass.multiply(weight3)).add(DistToCL_Reclass.multiply(weight4))
                                                             .add(EVT_Reclass.multiply(weight5)).add(TSPF_Reclass.multiply(weight6))
      out = weighted_overlay.multiply(.01)//.toInt() 
      // Panel2.clear()
      // Panel2.add(label1).add(label2).add(label3).add(label4).add(label5).add(label6).add(label7).add(label8)
    }
    if (select2.getValue() == "Private Lands Burn Team") {
      weighted_overlay = (Upland_Reclass.multiply(weight1)).add(DistToCL_Reclass.multiply(weight4)).add(EVT_Reclass.multiply(weight5))
                                                           .add(TSPF_Reclass.multiply(weight6)).add(Longleaf_Reclass.multiply(weight7))
                                                           .add(Permits_Reclass.multiply(weight8))
      out = weighted_overlay.multiply(.01)//.toInt() 
    }
    

    //var selection = selectAOI.getValue()
    //var AOI = AOIs.filterMetadata("NAME","equals",selection)
    
  // FINAL WEIGHTED OVERLAY OUTPUT WILL BE ADDED TO THE MAP
  var out_lyr = ui.Map.Layer(out, {min: 1, max: 9, palette: ['020aff','00a1ff','00f3ff','33ff00','fff700','ffa500','ff5e00','ff0000','610000']},select2.getValue());
  mapPanel.layers().set(0,out_lyr)

    //mapPanel.addLayer(AOI,{},selection,false)
    //mapPanel.centerObject(AOI)
    
  
  } 
})

// WEIGHT LABELS AND PANEL
var weightLabel1 = ui.Label('Sum of Layer Weights:') 
var weightLabel = ui.Label('....') 
var weightPanel = ui.Panel({
  widgets: ([weightLabel1, weightLabel]),
  layout: ui.Panel.Layout.flow('horizontal')
})

toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))
toolPanel.add(weightPanel)
toolPanel.add(ui.Label('The sum of the weights should equal 100'))
toolPanel.add(button)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // FUNCTION THAT ZOOMS TO SELECTED LAND AND RENDERS BOUNDARY
// var selectAOI = ui.Select({
//   items: AOINames.getInfo(),
//   placeholder: ('Choose Area of Interest'),
//   //style: {width: '290px'},
//   onChange: function(value) {
//     return value
//   }
// });

// toolPanel.add(selectAOI)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// RENDER BOUNDARIES SECTION
toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))
toolPanel.add(ui.Label('Render Boundaries', {'font-size': '20px'}));

// CHECKBOXES TO SHOW/HIDE LAYERS
var Check1 = ui.Checkbox({
  label: 'FFS Districts',
  value: false,
  onChange: function(checked) {
    if (checked) {
    District_lyr.setShown(true)
    }
    else {
    District_lyr.setShown(false)
    }
  }
})

var Check2 = ui.Checkbox({
  label: 'LIT Boundaries',
  value: false,
  onChange: function(checked) {
    if (checked) {
    LIT_lyr.setShown(true)
    }
    else {
    LIT_lyr.setShown(false)
    }
  }
})

var Check3 = ui.Checkbox({
  label: 'Counties',
  value: false,
  onChange: function(checked) {
    if (checked) {
    Counties_lyr.setShown(true)
    }
    else {
    Counties_lyr.setShown(false)
    }
  }
})


var Check4 = ui.Checkbox({
  label: 'Longleaf Legacy Landscape',
  value: false,
  onChange: function(checked) {
    if (checked) {
    LLL_lyr.setShown(true)
    }
    else {
    LLL_lyr.setShown(false)
    }
  }
})

toolPanel.add(Check1)
toolPanel.add(Check2)
toolPanel.add(Check3)
toolPanel.add(Check4)

// var Exportbutton = ui.Button({
//   label: "Export Image to Drive",
//   onClick: function(){
//   Export.image.toDrive({
//   image: EVT,
//   description: 'Existing Vegetation Type',
//   scale: 30,
//   region: LLL
// });
//   }
// })


// toolPanel.add(Exportbutton)

// var Panel2 = ui.Panel()
// toolPanel.add(Panel2)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// VISIT PUBLIC LANDS SECTION
toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))

// FUNCTION THAT ZOOMS TO SELECTED LAND AND RENDERS BOUNDARY
var location_select = ui.Select({
  items: PublicLandsNames.getInfo(),
  placeholder: ('Choose Area of Interest'),
  style: {width: '200px'},
  onChange: function(keys) {
    var selection = ee.Feature(PublicLands.filter(ee.Filter.eq('property_n', keys)).first());
    mapPanel.centerObject(selection); 
    var shown = true; // true or false, 1 or 0 
    var opacity = 0.5; // number [0-1]
    var Land_Bounds = ui.Map.Layer(selection, {color: 'black'}, 'Public Lands Selection', shown, opacity)
    mapPanel.layers().set(5, Land_Bounds)
  }
});

toolPanel.add(ui.Label('Visit Public Lands', {'font-size': '20px'}))
toolPanel.add(location_select)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLOSING NOTES
toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))
toolPanel.add(ui.Label('This application is still in development. Additional functionality may be added upon request.', {fontSize: '11px'}))
toolPanel.add(ui.Label('Please contact Eli Simonson (esimonson@talltimbers.org) if you have any questions about this application', {fontSize: '11px'}))

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CREATE A LEGEND, DEFINE PARAMETERS, ADD TO MAP

// CREATE LEGEND PANEL, DEFINE LOCATION ON THE MAP
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    shown: false
  }
});

// CREATE LEGEND TITEL
var legendTitle = ui.Label({
  value: 'Prioritization Ranking System',
  style: {
    fontWeight: 'bold',
    fontSize: '12px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});

// ADD TITLE TO LEGEND PANEL
legend.add(legendTitle);
    
// FUNCTION THAT CREATES AND STYLES 1 ROW OF THE LEGEND
var makeRow = function(color, name) {
      
      // CREATE THE LABEL THAT IS ACTUALLY THE COLORED BOX
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // USE PADDING TO GIVE THE BOX HEIGHT AND WIDTH
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
      
      // CREATE THE LABEL (DESCRIPTION TEXT)
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // RETURN THE PANEL (1 ROW)
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

//  PELETTE WITH THE COLORS
var palette =['020aff','00a1ff','00f3ff','33ff00','fff700','ffa500','ff5e00','ff0000','610000'];

// NAMES IN THE LEGEND THAT CORRESPOND TO EACH COLOR
var names = ['1 (Lowest Priority)','2','3','4','5','6','7','8','9 (Highest Priority'];

// ADD ROWS WITH COLOR AND NAMES TO THE LEGEND
for (var i = 0; i < 9; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  

// ADD LEGEND TO MAP
 
mapPanel.add(legend); 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // EXPORT RESULTS AS TABLE

// var export_button = ui.Button({
//   label: 'Export Model Parameters as CSV',
//   onClick: function(){
    
//     // RANKS
//     var rank1  = slider1.getValue();  var rank2 = slider2.getValue();   var rank3 = slider3.getValue();   var rank4 = slider4.getValue();
//     var rank5  = slider5.getValue();  var rank6 = slider6.getValue();   var rank7 = slider7.getValue();   var rank8 = slider8.getValue();
//     var rank9  = slider9.getValue();  var rank10 = slider10.getValue(); var rank11 = slider11.getValue(); var rank12 = slider12.getValue();
//     var rank13 = slider13.getValue(); var rank14 = slider14.getValue(); var rank15 = slider15.getValue(); var rank16 = slider16.getValue();
//     var rank17 = slider17.getValue(); var rank18 = slider18.getValue(); var rank19 = slider19.getValue(); var rank20 = slider20.getValue();
//     var rank21 = slider21.getValue(); var rank22 = slider22.getValue(); var rank23 = slider23.getValue(); var rank24 = slider24.getValue();
//     var rank25 = slider25.getValue(); var rank26 = slider26.getValue(); var rank27 = slider27.getValue(); var rank28 = slider28.getValue();
//     var rank29 = slider29.getValue(); var rank30 = slider30.getValue(); var rank31 = slider31.getValue(); var rank32 = slider32.getValue();
//     var rank33 = slider33.getValue(); var rank34 = slider34.getValue(); var rank35 = slider35.getValue(); var rank36 = slider36.getValue();
//     var rank37 = slider37.getValue(); var rank38 = slider38.getValue(); var rank39 = slider39.getValue(); var rank40 = slider40.getValue();
//     var rank41 = slider41.getValue(); var rank42 = slider42.getValue(); var rank43 = slider43.getValue(); var rank44 = slider44.getValue();
//     var rank45 = slider45.getValue(); var rank46 = slider46.getValue(); var rank47 = slider47.getValue(); var rank48 = slider48.getValue();
//     var rank49 = slider49.getValue(); var rank50 = slider50.getValue(); var rank23a = slider23a.getValue(); var rank30a = slider30a.getValue(); 
//     var rank51 = slider51.getValue(); var rank52 = slider52.getValue(); var rank53 = slider53.getValue(); var rank54 = slider54.getValue();
//     var rank55 = slider55.getValue(); var rank56 = slider56.getValue(); var rank57 = slider57.getValue(); var rank58 = slider58.getValue();
//     var rank59 = slider59.getValue(); var rank60 = slider60.getValue(); var rank61 = slider61.getValue(); var rank62 = slider62.getValue();
//     var rank63 = slider63.getValue(); var rank64 = slider64.getValue(); var rank65 = slider65.getValue(); var rank66 = slider66.getValue();
//     var rank67 = slider67.getValue(); var rank68 = slider68.getValue(); 
    
//     // WEIGHTS
//     var weight1 = weightslider1.getValue(); var weight2 = weightslider2.getValue(); var weight3 = weightslider3.getValue();
//     var weight4 = weightslider4.getValue(); var weight5 = weightslider5.getValue(); var weight6 = weightslider6.getValue();
//     var weight7 = weightslider7.getValue(); var weight8 = weightslider8.getValue(); var weight9 = weightslider9.getValue();
    
//     // LISTS
//     var upland_moidel_header = [{'model': 'upland prioritization'}]
//     var wetland_model_header = [{'model': 'wetland prioritization'}]
//     var private_lands_header = [{'model': 'private lands burn team'}]
    
//     var wetland_species_list =  [{'layer': 'wetland species'},{'0 overlapping habitats': rank7},{'1 overlapping habitats': rank8},{'2 overlapping habitats': rank9},{'3 overlapping habitats': rank10},
//     {'4 overlapping habitats': rank11},{'5 overlapping habitats': rank12},{'6 overlapping habitats': rank13},{'7 overlapping habitats': rank14},{'8 overlapping habitats': rank15},{'layer weight': weight2}]
//     var climate_resilience_list = [{'layer': 'tnc climate resilience'},{'far above average': rank16},{'slightly above average': rank17},{'above average': rank18},{'average': rank19},{'slightly below average': rank20},
//     {'below average': rank21},{'far below average': rank22},{'urban': rank23},{'open water': rank23a},{'layer weight': weight3}]
//     var dist_to_cl_list =   [{'layer': 'distance to conservation lands'},{'within 0.25 miles': rank24},{'within 0.50 miles': rank25},{'within 1 mile': rank26},{'within 2 miles': rank27},{'within 3 miles': rank28},
//     {'within 4 miles': rank29},{'within 5 miles': rank30},{'greater than 5 miles': rank30a},{'layer weight': weight4}]
//     var evt_list = [{'layer':'existing vegetation type'},{'no data': rank31},{'urban': rank32},{'open water': rank33},{'wetland': rank34},{'coastal wetland': rank35},{'forested wetland': rank36},
//     {'mixed pine hardwood': rank37},{'planted pine': rank38},{'pine flatwoods': rank39},{'upland/planted pine': rank40},{'upland hardwood': rank41},{'upland pine': rank42},{'field/pasture/ag': rank43},
//     {'layer weight': weight5}]
    
//     // if (select2.getValue() == "Wetland Prioritization"){

//     // }
//     // if (select2.getValue() == "Upland Prioritization") {

//     // }
//     // if (select2.getValue() == "Private Lands Burn Team") {

//     // }
    
//     var list = ee.List([
//       // MODEL
//       wetland_model_header,
//       // WETLAND SPECIES
//       wetland_species_list,
//       // DISTANCE TO CONSERVATION LANDS
//       dist_to_cl_list,
//       // CLIMATE RESILIENCE
//       climate_resilience_list,
//       // EXISTING VEGETATION TYPE
//       evt_list]);
    
//     var featureCollection = ee.FeatureCollection(list
//                         .map(function(element){
//                         return ee.Feature(null,{prop:element})}))
                        
//     var downloadUrl = featureCollection.getDownloadURL({
//       format: 'CSV',
//       selectors: undefined,
//       filename: select2.getValue() + ' Parameters'
//   });

//   link.setUrl(downloadUrl)

//   } 
// })

// var link = ui.Label('Download Link...')

// toolPanel.add(export_button)
// toolPanel.add(link)
