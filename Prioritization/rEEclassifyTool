/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Upland_Species = ee.Image("users/esimonson/Prioritization/Upland_Species"),
    Wetland_Species = ee.Image("users/esimonson/Prioritization/Wetland_Species_SEGAP"),
    Resilience = ee.Image("users/esimonson/Prioritization/TNC_Climate_Resilience"),
    TSPF = ee.Image("users/esimonson/Prioritization/TSPF_94to19"),
    EVT = ee.Image("users/esimonson/Prioritization/ExistingVegType"),
    DistToCL = ee.Image("users/esimonson/Prioritization/DistToCL"),
    LLL = ee.FeatureCollection("users/esimonson/Prioritization/LLL");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// PRE-PROCESSING
TSPF = TSPF.unmask(0)
DistToCL = DistToCL.unmask(7)

var TSPF_reclass = TSPF.remap([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0],[1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,0])

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MAP PANEL CONFIGURATION //

// CREATE A MAP PANEL, DEFINE STYLE PREFERENCES, SET AS DEFAULT MAP
var mapPanel = ui.Map();
mapPanel.setOptions('HYBRID');
mapPanel.style().set('cursor', 'crosshair');
ui.root.widgets().reset([mapPanel]);

mapPanel.addLayer(LLL,{},'LLL',false)
mapPanel.centerObject(LLL,8)

// LABELS
var header = ui.Label('Prioritization Modeling Tool', {fontSize: '24px', color: 'green'});
var text = ui.Label('A web-interface for building prioritization models for the Longleaf Legacy Landscape',{fontSize: '11px'});
var green_line = ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},})

// TTLC LOGO
var logo = ee.Image("users/esimonson/Logos/TTRS_TTLC_Logo");
var branding = ui.Thumbnail({image:logo,params:{bands:['b1','b2','b3'],min:0,max:255},style:{width:'260px',height:'100px'}});

// CREATE A TOOL PANEL AND INTEGRATE IT INTO THE MAP
var toolPanel = ui.Panel({
  widgets : ([header, branding, text, green_line]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '330px'}
});
ui.root.widgets().add(toolPanel);

// CREATE A LIST TO SELECT FROM AVAILABLE RASTER LATERS
var layers = ee.List(['Upland Species', 'TNC Climate Resilience', 'Distance to Conservation Lands', 'Existing Vegetation Type','Time Since Previous Fire'])
var layers2 = ee.List(['Wetland Species', 'TNC Climate Resilience', 'Distance to Conservation Lands', 'Existing Vegetation Type'])
var scenarios = ['Upland Prioritization','Wetland Prioritization']


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var input_list = []

// CHECKBOX WIDGET SECTION
var Check1 = ui.Checkbox({
  label: 'Upland Species',
  value: false,
  onChange: function(checked) {
    if (checked) {
    input_list.push('Upland Species')
    }
    else {
    input_list = []
    }
  print(input_list)
  }
})
var Check2 = ui.Checkbox({
  label: 'TNC Climate Resilience',
  value: false,
  onChange: function(checked) {
    if (checked) {
    input_list.push('TNC Climate Resilience')
    }
    else {
    input_list = []
    }
  print(input_list)
  }
})

var Check3 = ui.Checkbox({
  label: 'Distance to Conservation Lands',
  value: false,
  onChange: function(checked) {

  }
})

var Check4 = ui.Checkbox({
  label: 'Existing Vegetation Type',
  value: false,
  onChange: function(checked) {

  }
})

var Check5 = ui.Checkbox({
  label: 'Time Since Previous Fire',
  value: false,
  onChange: function(checked) {

  }
})

var checkPanel = ui.Panel({
  widgets : ([Check1,Check2,Check3, Check4, Check5]),
  layout: ui.Panel.Layout.flow('vertical'),
  //style: {width: '150px'}
});

// toolPanel.add(ui.Label('Select Model Inputs', {'font-size': '20px'}));
// toolPanel.add(checkPanel)
// toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SELECTION WIDGET THAT REPONDS TO USER INPUT
// ON CHANGE FUNCTION WILL RENDER A CLASIFICATION PANEL FOR EACH LAYER
var select = ui.Select({
  //items: layers,
  placeholder: ('Model Inputs...'),
  style: {width: '200px'},
  onChange: function(keys) {
    if (keys == "Upland Species"){
      Panel.clear().add(reclassPanel_UplandSpecies)
    }
    if (keys == "Wetland Species"){
      Panel.clear().add(reclassPanel_WetlandSpecies)
    }
    if (keys == "TNC Climate Resilience"){
      Panel.clear().add(reclassPanel_ClimateResilience)
    }
    if (keys == "Distance to Conservation Lands"){
      Panel.clear().add(reclassPanel_DistToCL)
    }
    if (keys == "Existing Vegetation Type"){
      Panel.clear().add(reclassPanel_EVT)
    }
    if (keys == "Time Since Previous Fire"){
      Panel.clear().add(reclassPanel_TSPF)
    }
}
});

var select2 = ui.Select({
  items: scenarios,
  placeholder: 'Upland Prioritization',
  style: {width: '200px'},
  onChange: function(keys){
    var weight1 = weightslider1.getValue()
    var weight2 = weightslider2.getValue()
    var weight3 = weightslider3.getValue()
    var weight4 = weightslider4.getValue()
    var weight5 = weightslider5.getValue()
    var weight6 = weightslider6.getValue()
    // FUNCTION TO ADD SELECTED COUNTY NAMES TO ITEMS (LIST) OF THE COUNTY SELECT WIDGET
    if (keys === "Upland Prioritization") {
      var selectedLayerNames = layers
      Panel.clear().add(reclassPanel_UplandSpecies)
      var finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      weightLabel.setValue(finalweight)
    }
    if (keys === "Wetland Prioritization") {
      selectedLayerNames = layers2
      Panel.clear().add(reclassPanel_WetlandSpecies)
      finalweight = (weight2 + weight3 + weight4 + weight5)
      weightLabel.setValue(finalweight)
    }
    selectedLayerNames.evaluate(function(values) {
    select.items().reset(values);
    select.setValue(values[0], false);
})
  }
  
})
// ADD THE SELECTION WIDGET TO THE TOOL PANEL
toolPanel.add(ui.Label('Set Model Parameters', {'font-size': '20px'}));
toolPanel.add(select2)
toolPanel.add(select)

var Upland = scenarios[0]
var Wetland = scenarios[1]
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SLIDER SECTION //

// UPLAND SPECIES
var slider1 = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider2 = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider3 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider4 = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider5 = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider6 = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider1 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      weightLabel.setValue(finalweight)
  return value} });

// WETLAND SPECIES
var slider7  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider8  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider9  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider10 = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider11 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider12 = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider13 = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider14 = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider15 = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var weightslider2 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      var finalweight = (weight2 + weight3 + weight4 + weight5)
      weightLabel.setValue(finalweight)
  return value} });

// TNC CLIMATE RESILIENCE
var slider16  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider17  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider18  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider19  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider20  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider21  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider22  = ui.Slider({min:1, max: 9, value: 2, step: 1, onChange: function(value) {return value} });
var slider23  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider23a = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider3 = ui.Slider({min:5, max: 100, value: 15, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue()  
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      
      if (select2.getValue() === "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      weightLabel.setValue(finalweight)
  return value} });

// DISTANCE TO CONSERVATION LANDS
var slider24  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider25  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider26  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider27  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider28  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider29  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider30  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider30a = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider4 = ui.Slider({min:5, max: 100, value: 20, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      
      if (select2.getValue() === "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      weightLabel.setValue(finalweight)
  return value} });

// EXISTING VEGETATION TYPE
var slider31  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider32  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var slider33  = ui.Slider({min:1, max: 9, value: 2, step: 1, onChange: function(value) {return value} });
var slider34  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider35  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider36  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var slider37  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider38  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider39  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider40  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider41  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider42  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider43  = ui.Slider({min:1, max: 9, value: 4, step: 1, onChange: function(value) {return value} });
var weightslider5 = ui.Slider({min:5, max: 100, value: 20, step: 5, 
    onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      
      if (select2.getValue() === "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      weightLabel.setValue(finalweight)
  return value} });

// TIME SINCE PREVIOUS FIRE
var slider44  = ui.Slider({min:1, max: 9, value: 9, step: 1, onChange: function(value) {return value} });
var slider45  = ui.Slider({min:1, max: 9, value: 8, step: 1, onChange: function(value) {return value} });
var slider46  = ui.Slider({min:1, max: 9, value: 7, step: 1, onChange: function(value) {return value} });
var slider47  = ui.Slider({min:1, max: 9, value: 6, step: 1, onChange: function(value) {return value} });
var slider48  = ui.Slider({min:1, max: 9, value: 5, step: 1, onChange: function(value) {return value} });
var slider49  = ui.Slider({min:1, max: 9, value: 3, step: 1, onChange: function(value) {return value} });
var slider50  = ui.Slider({min:1, max: 9, value: 1, step: 1, onChange: function(value) {return value} });
var weightslider6 = ui.Slider({min:5, max: 100, value: 25, step: 5, onChange: function(value) {
      var weight1 = weightslider1.getValue()
      var weight2 = weightslider2.getValue() 
      var weight3 = weightslider3.getValue()
      var weight4 = weightslider4.getValue()
      var weight5 = weightslider5.getValue()
      var weight6 = weightslider6.getValue()
      
      if (select2.getValue() === "Wetland Prioritization"){
        var finalweight = (weight2 + weight3 + weight4 + weight5)
      }
      if (select2.getValue() == "Upland Prioritization") {
        finalweight = (weight1 + weight3 + weight4 + weight5 + weight6)
      }
      weightLabel.setValue(finalweight)
  return value} });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// PANEL CONFIGURATION //

var textPanel_UplandSpecies = ui.Panel({
  widgets : ([ui.Label('0 overlapping habitats'),ui.Label('1 overlapping habitats'),ui.Label('2 overlapping habitats'),
              ui.Label('3 overlapping habitats'),ui.Label('4 overlapping habitats'),ui.Label('5 overlapping habitats'),
              ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_WetlandSpecies = ui.Panel({
  widgets : ([ui.Label('0 overlapping habitats'),ui.Label('1 overlapping habitats'),ui.Label('2 overlapping habitats'),
              ui.Label('3 overlapping habitats'),ui.Label('4 overlapping habitats'),ui.Label('5 overlapping habitats'),
              ui.Label('6 overlapping habitats'),ui.Label('7 overlapping habitats'),ui.Label('8 overlapping habitats'),
              ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_ClimateResilience = ui.Panel({
  widgets : ([ui.Label('Far Above Average'),ui.Label('Above Average'),
              ui.Label('Slightly Above Average'),ui.Label('Average'),ui.Label('Slightly Below Average'),
              ui.Label('Below Average'),ui.Label('Far Below Average'),ui.Label('Developed'),ui.Label('Open Water'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_DistToCL = ui.Panel({
  widgets : ([ui.Label('Within 0.25 Miles'),ui.Label('Within 0.5 Miles'),
              ui.Label('Within 1 Mile'),ui.Label('Within 2 Miles'),ui.Label('Within 3 Miles'),
              ui.Label('Within 4 Miles'),ui.Label('Within 5 Miles'),ui.Label('Greater Than 5 Miles'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_EVT = ui.Panel({
  widgets : ([ui.Label('No Data'),ui.Label('Urban'),ui.Label('Open Water'),ui.Label('Wetland'),
              ui.Label('Coastal Wetland'),ui.Label('Forested Wetland'),ui.Label('Mixed Pine Hardwood'),
              ui.Label('Planted Pine'),ui.Label('Pine Flatwoods'),ui.Label('Upland/Planted Pine'),
              ui.Label('Upland Hardwood'),ui.Label('Upland Pine'),ui.Label('Field/Pasture/Ag'),ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var textPanel_TSPF = ui.Panel({
  widgets : ([ui.Label('1-3 years'),ui.Label('4-6 years'),ui.Label('7-10 years'),ui.Label('11-15 years'),
              ui.Label('16-20 years'),ui.Label('21-26 years'),ui.Label('No Fire Detected'), ui.Label('Layer Weight')
  ]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '160px'}
});

var sliderPanel_UplandSpecies = ui.Panel({
  widgets : ([slider1,slider2,slider3,slider4,slider5,slider6,weightslider1]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_WetlandSpecies = ui.Panel({
  widgets : ([slider7,slider8,slider9,slider10,slider11,slider12,slider13,slider14,slider15,weightslider2]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_ClimateResilience = ui.Panel({
  widgets : ([slider16,slider17,slider18,slider19,slider20,slider21,slider22,slider23,slider23a,weightslider3]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_DistToCL = ui.Panel({
  widgets : ([slider24,slider25,slider26,slider27,slider28,slider29,slider30,slider30a,weightslider4]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_EVT = ui.Panel({
  widgets : ([slider31,slider32,slider33,slider34,slider35,slider36,slider37,slider38,slider39,slider40,slider41,slider42,slider43,weightslider5]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});

var sliderPanel_TSPF = ui.Panel({
  widgets : ([slider44,slider45,slider46,slider47,slider48,slider49,slider50,weightslider6]),
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '150px'}
});


var reclassPanel_UplandSpecies = ui.Panel({
  widgets: ([textPanel_UplandSpecies, sliderPanel_UplandSpecies]),
  layout: ui.Panel.Layout.flow('horizontal'),
  style: {shown: true}
})

var reclassPanel_WetlandSpecies = ui.Panel({
  widgets: ([textPanel_WetlandSpecies, sliderPanel_WetlandSpecies]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_ClimateResilience = ui.Panel({
  widgets: ([textPanel_ClimateResilience, sliderPanel_ClimateResilience]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_DistToCL = ui.Panel({
  widgets: ([textPanel_DistToCL, sliderPanel_DistToCL]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_EVT = ui.Panel({
  widgets: ([textPanel_EVT, sliderPanel_EVT]),
  layout: ui.Panel.Layout.flow('horizontal')
})

var reclassPanel_TSPF = ui.Panel({
  widgets: ([textPanel_TSPF, sliderPanel_TSPF]),
  layout: ui.Panel.Layout.flow('horizontal')
})

// CREATE A PANEL THAT WILL BE USED TO DYNAMICALLY LOAD A RECLASSIFICATION PANEL FOR EACH LAYER
var Panel = ui.Panel()
toolPanel.add(Panel)

// INITIALLY DISPLAY THE UPLAND SPECIES RECLASSIFICATION PANEL
Panel.add(reclassPanel_UplandSpecies)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var button = ui.Button({
  label: 'Run Prioritization Model',
  onClick: function(){
    
    // RANKS
    var rank1  = slider1.getValue();  var rank2 = slider2.getValue();   var rank3 = slider3.getValue();   var rank4 = slider4.getValue();
    var rank5  = slider5.getValue();  var rank6 = slider6.getValue();   var rank7 = slider7.getValue();   var rank8 = slider8.getValue();
    var rank9  = slider9.getValue();  var rank10 = slider10.getValue(); var rank11 = slider11.getValue(); var rank12 = slider12.getValue();
    var rank13 = slider13.getValue(); var rank14 = slider14.getValue(); var rank15 = slider15.getValue(); var rank16 = slider16.getValue();
    var rank17 = slider17.getValue(); var rank18 = slider18.getValue(); var rank19 = slider19.getValue(); var rank20 = slider20.getValue();
    var rank21 = slider21.getValue(); var rank22 = slider22.getValue(); var rank23 = slider23.getValue(); var rank24 = slider24.getValue();
    var rank25 = slider25.getValue(); var rank26 = slider26.getValue(); var rank27 = slider27.getValue(); var rank28 = slider28.getValue();
    var rank29 = slider29.getValue(); var rank30 = slider30.getValue(); var rank31 = slider31.getValue(); var rank32 = slider32.getValue();
    var rank33 = slider33.getValue(); var rank34 = slider34.getValue(); var rank35 = slider35.getValue(); var rank36 = slider36.getValue();
    var rank37 = slider37.getValue(); var rank38 = slider38.getValue(); var rank39 = slider39.getValue(); var rank40 = slider40.getValue();
    var rank41 = slider41.getValue(); var rank42 = slider42.getValue(); var rank43 = slider43.getValue(); var rank44 = slider44.getValue();
    var rank45 = slider45.getValue(); var rank46 = slider46.getValue(); var rank47 = slider47.getValue(); var rank48 = slider48.getValue();
    var rank49 = slider49.getValue(); var rank50 = slider50.getValue(); var rank23a = slider23a.getValue(); var rank30a = slider30a.getValue(); 
    
    // WEIGHTS
    var weight1 = weightslider1.getValue(); var weight2 = weightslider2.getValue(); var weight3 = weightslider3.getValue();
    var weight4 = weightslider4.getValue(); var weight5 = weightslider5.getValue(); var weight6 = weightslider6.getValue();
    
    // LISTS
    var list1 = [rank1,rank2,rank3,rank4,rank5,rank6]; // UPLAND SPECIES
    var list2 = [rank7,rank8,rank9,rank10,rank11,rank12,rank13,rank14,rank15]; // WETLAND SPECIES
    var list3 = [rank16,rank17,rank18,rank19,rank20,rank21,rank22,rank23,rank23a]; // CLIMATE RESILIENCE
    var list4 = [rank24,rank25,rank26,rank27,rank28,rank39,rank30,rank30a]; // DISTANCE TO CONSERVATION LANDS
    var list5 = [rank31,rank32,rank33,rank34,rank35,rank36,rank37,rank38,rank39,rank40,rank41,rank42,rank43]; // EXISTING VEGETATION TYPE
    var list6 = [rank44,rank45,rank46,rank47,rank48,rank49,rank50]; // TIME SINCE PREVIOUS FIRE
    
    var label1 = ui.Label("Upland Species:") 
    var label2 = ui.Label("0 overlapping habitats - "+rank1)
    var label3 = ui.Label("1 - "+rank2)
    var label4 = ui.Label("2 - "+rank3)
    var label5 = ui.Label("3 - "+rank4)
    var label6 = ui.Label("4 - "+rank5)
    var label7 = ui.Label("5 - "+rank6)
    var label8 = ui.Label("Weight: "+weight1)
    
    // RECLASSIFY SOURCE RASTER USING LIST
    var Upland_Reclass = Upland_Species.remap([0,1,2,3,4,5],list1)
    var Wetland_Reclass = Wetland_Species.remap([0,1,2,3,4,5,6,7,8],list2)
    var Resilience_Reclass = Resilience.remap([8,7,6,5,4,3,2,1,128],list3)
    var DistToCL_Reclass = DistToCL.remap([0,1,2,3,4,5,6,7],list4)
    var EVT_Reclass = EVT.remap([0,1,2,3,4,5,6,7,8,9,10,11,12],list5)
    var TSPF_Reclass = TSPF_reclass.remap([1,2,3,4,5,6,0],list6)
    
    if (select2.getValue() === "Wetland Prioritization"){
      var weighted_overlay = (Wetland_Reclass.multiply(weight2)).add(Resilience_Reclass.multiply(weight3)).add(DistToCL_Reclass.multiply(weight4))
                                                             .add(EVT_Reclass.multiply(weight5))
      var out = weighted_overlay.multiply(.01)//.toInt()  
    }
    if (select2.getValue() == "Upland Prioritization") {
      weighted_overlay = (Upland_Reclass.multiply(weight1)).add(Resilience_Reclass.multiply(weight3)).add(DistToCL_Reclass.multiply(weight4))
                                                             .add(EVT_Reclass.multiply(weight5)).add(TSPF_Reclass.multiply(weight6))
      out = weighted_overlay.multiply(.01)//.toInt() 
      
    // Panel2.clear()
    // Panel2.add(label1).add(label2).add(label3).add(label4).add(label5).add(label6).add(label7).add(label8)
    }
    
  // // CALCULATE WEIGHTED OVERLAY
  //   var weighted_overlay = (Upland_Reclass.multiply(weight1)).add(Resilience_Reclass.multiply(weight3)).add(DistToCL_Reclass.multiply(weight4))
  //                                                           .add(EVT_Reclass.multiply(weight5)).add(TSPF_Reclass.multiply(weight6))
  //   var out = weighted_overlay.multiply(.01)//.toInt()                                                  
                                                             
  // FINAL WEIGHTED OVERLAY OUTPUT WILL BE ADDED TO THE MAP
    mapPanel.addLayer(out, {min: 1, max: 9, palette: ['020aff','00a1ff','00f3ff','33ff00','fff700','ffa500','ff5e00','ff0000','610000']})
  } 
})

var weightLabel1 = ui.Label('Sum of Layer Weights:') 

var weightLabel = ui.Label('100') 

var weightPanel = ui.Panel({
  widgets: ([weightLabel1, weightLabel]),
  layout: ui.Panel.Layout.flow('horizontal')
})

toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))
toolPanel.add(weightPanel)
toolPanel.add(ui.Label('The sum of the weights should equal 100'))
toolPanel.add(button)

// var ModelSummary = ui.Label('Model Summary...')

// toolPanel.add(ModelSummary)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// toolPanel.add(ui.Label({value: '_________________________________________________',style: {fontWeight: 'bold', color: 'green'},}))
// toolPanel.add(ui.Label('Export Spatial Output', {'font-size': '20px'}));

// var Exportbutton = ui.Button({
//   label: "Export Image to Drive",
//   onClick: function(){
//   Export.image.toDrive({
//   image: EVT,
//   description: 'Existing Vegetation Type',
//   scale: 30,
//   region: LLL
// });
//   }
// })


// toolPanel.add(Exportbutton)

// var Panel2 = ui.Panel()
// toolPanel.add(Panel2)


