/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var SE_Counties = ee.FeatureCollection("users/esimonson/Permits/SE_Counties_w_PermitData_Acres_FINAL"),
    SE_AOI = ee.FeatureCollection("users/esimonson/AOIs/Southeast_States_AOI"),
    GRIDMET = ee.ImageCollection("IDAHO_EPSCOR/GRIDMET"),
    DAYMET = ee.ImageCollection("NASA/ORNL/DAYMET_V4"),
    MODIS_BA = ee.ImageCollection("MODIS/006/MCD64A1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATA PRE PROCESSING
// Define a JSON object for storing UI components.
var c = {};

// Define a legend widget group.
c.legend = {};
c.legend.title = ui.Label();
c.legend.colorbar = ui.Thumbnail(ee.Image.pixelLonLat().select(0));
c.legend.leftLabel = ui.Label('[min]');
c.legend.centerLabel = ui.Label();
c.legend.rightLabel = ui.Label('[max]');
c.legend.labelPanel = ui.Panel({
  widgets: [
    c.legend.leftLabel,
    c.legend.centerLabel,
    c.legend.rightLabel,
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});
c.legend.panel = ui.Panel([
  c.legend.title,
  c.legend.colorbar,
  c.legend.labelPanel
]);

// Define CSS-like class style properties for widgets; reusable styles.
var s = {};

s.opacityWhiteMed = {
  backgroundColor: 'rgba(255, 255, 255, 0.5)'
};
s.opacityWhiteNone = {
  backgroundColor: 'rgba(255, 255, 255, 0)'
};
s.aboutText = {
  fontSize: '13px',
  color: '505050'
};
s.widgetTitle = {
  fontSize: '15px',
  fontWeight: 'bold',
  margin: '8px 8px 0px 8px',
  color: '383838'
};
s.stretchHorizontal = {
  stretch: 'horizontal'
};
s.noTopMargin = {
  margin: '0px 8px 8px 8px'
};
s.smallBottomMargin = {
  margin: '8px 8px 4px 8px'
};
s.bigTopMargin = {
  margin: '24px 8px 8px 8px'
};
s.divider = {
  backgroundColor: 'F0F0F0',
  height: '4px',
  margin: '20px 0px'
};

c.legend.title.style().set({
  fontWeight: 'bold',
  fontSize: '12px',
  color: '383838'
});
c.legend.title.style().set(s.opacityWhiteNone);
c.legend.colorbar.style().set({
  stretch: 'horizontal',
  margin: '0px 8px',
  maxHeight: '20px'
});
c.legend.leftLabel.style().set({
  margin: '4px 8px',
  fontSize: '12px'
});
c.legend.leftLabel.style().set(s.opacityWhiteNone);
c.legend.centerLabel.style().set({
  margin: '4px 8px',
  fontSize: '12px',
  textAlign: 'center',
  stretch: 'horizontal'
});
c.legend.centerLabel.style().set(s.opacityWhiteNone);
c.legend.rightLabel.style().set({
  margin: '4px 8px',
  fontSize: '12px'
});
c.legend.rightLabel.style().set(s.opacityWhiteNone);
c.legend.panel.style().set({
  position: 'bottom-left',
  width: '200px',
  padding: '0px'});
c.legend.panel.style().set(s.opacityWhiteMed);
c.legend.labelPanel.style().set(s.opacityWhiteNone);
c.legend.panel.style().set({shown: false})


Map.add(c.legend.panel)

// FUNCTION TO PERFORM CALCULATIONS ON SELECT BANDS
// RETURNS THE FINAL BANDS FOR PLOTTING

var getAcres = function (img) {
    img = img.select('BurnDate')
    var reclass = ee.Image(0)
        .where(img.gt(1).and(img.lte(366)), 1)
    var mask = reclass.eq(1)
    var AcreImg = reclass.multiply(0.6177635).rename('MODIS Burned Area').updateMask(mask)

    return(AcreImg.copyProperties(img,img.propertyNames()))
}

var getBands = function (img) {
  var temp = img.select('tmmx')
  var fahrenheit = ((temp.subtract(273.15)).multiply(1.8).add(32)).rename('maximum temperature')
  var precip = img.select('pr').rename('precipitation')
  var minRH = img.select('rmin').rename('minimum relative humidity')
  var dfm100hr = img.select('fm100').rename('100-hr dead fuel moisture')
  var img_out = precip.addBands(fahrenheit).addBands(minRH).addBands(dfm100hr)
  return img_out
}

var getBandsDAYMET = function(img){
  var precip = img.select('prcp').rename('precipitation')
  var img_out = precip
  return img_out
}

GRIDMET = GRIDMET.map(getBands)
DAYMET = DAYMET.map(getBandsDAYMET)
MODIS_BA = MODIS_BA.map(getAcres)
print(MODIS_BA)

// IMPORT PALETTES
var palettes = require('users/gena/packages:palettes');
var RHpalette = palettes.cmocean.Curl[7]


// Define info about the bands in this collection that the app will present.

var m = {}

m.imgInfo = {
  bands: {
    'precipitation': {
      bname: 'precipitation',
      color: 'd4e7b0',
      axistitle: 'precipitation (mm/daily)',
      vis: {
        min: 0,
        max: 10,
        palette: ['fef0d9', 'fdcc8a', 'fc8d59', 'e34a33', 'b30000']
      }
    },
    'maximum temperature': {
      bname: 'maximum temperature',
      color: 'd2cdc0',
      axistitle: 'maximum temperature (F)',
      vis: {
        min: 50,
        max: 90,
        palette: ['ffffd4', 'fed98e', 'fe9929', 'd95f0e', '993404']
      }
    },
    'minimum relative humidity': {
      bname: 'minimum relative humidity',
      color: 'd2cdc0',
      axistitle: 'minimum relative humidity (%)',
      vis: {
        min: 40,
        max: 60,
        palette: RHpalette
      }
    },
    '100-hr dead fuel moisture': {
      bname: '100-hr dead fuel moisture',
      color: 'd2cdc0',
      axistitle: '100-hr dead fuel moisture (%)',
      vis: {
        min: 15,
        max: 20,
        palette: ['ffc300', 'ff5733', 'c70039', '900c3f', '581845']
      }
    },
    // 'MODIS Burned Area': {
    //   bname: 'MODIS Burned Area',
    //   color: 'd2cdc0',
    //   axistitle: 'Burned Area (acres)',
    //   vis: {
    //     min: 0,
    //     max: 1,//0.05148029166666667,
    //     palette: ['ffc300', 'ff5733', 'c70039', '900c3f', '581845']
    //   }
    //}
      }
    };

// IMPORT US STATES
var table = ee.FeatureCollection("TIGER/2018/States")
var FL = table.filterMetadata('STUSPS', 'equals', 'CA')

var colors = {'transparent': '#11ffee00', 'gray': '#F8F9FA'};

// EXTRACT STATE NAMES TO A VARIABLE
var StateNames = SE_Counties.aggregate_array('STATE_NAME').distinct().sort()
var CountyNames = SE_Counties.aggregate_array('COUNTY').sort()

// DATES TO BE USED FOR FILTERING IMAGE COLLECTION
var now = Date.now(); 
var today = ee.Date(now);
var Jan1_2020 = ee.Date('2020-01-01')
var Dec31_2020 = ee.Date('2020-12-31')
print(today)

var month_ago = today.advance(-1,'month')
var two_months_ago = today.advance(-2,'month')

var one_month_time = ee.DateRange(month_ago,today)
var two_months_time = ee.DateRange(two_months_ago,today)
var last_year = ee.DateRange(Jan1_2020, Dec31_2020)

var dateList = [
  {label: 'The Last Month', value: one_month_time},
  {label: 'The Last Two Months', value: two_months_time},
  {label: 'The Last Year', value: last_year}
  ]

print(dateList)

// PROCESS GRIDMET TO ANNUAL SUMS 
// SET START AND END YEAR
var startyear = 2010;
var endyear = 2020;
 
// MAKE DATE OBJECTS FROM THE START AND END YEARS
var startdate = ee.Date.fromYMD(startyear, 1, 1);
var enddate = ee.Date.fromYMD(endyear + 1, 1, 1);
 
// MAKE A LIST WITH THE START AND END YEARS
var years = ee.List.sequence(startyear, endyear);

// CALCULATE ANNUAL PRECIPITATION IN LEON COUNTY FROM USING GRIDMET AS DATA SOURCE
var annualPrecip = ee.ImageCollection.fromImages(
  years.map(function (year) {
    var annual = GRIDMET
        .filter(ee.Filter.calendarRange(year, year, 'year'))
        .sum();
    return annual
        .set('year', year)
        .set('system:time_start', ee.Date.fromYMD(year, 1, 1));
}));

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UI WIDGETS SECTION 

// CREATE A CHART PANEL (INITIALLY HIDDEN) FOR TIME SERIES PLOTTING
var chartPanel1 = ui.Panel({
  style: {height: '280px', width: '600px', position: 'bottom-right', shown: false}
  });

// ADD A CLOSE BUTTON TO THE CHART PANEL
var Close = ui.Button('Close', function() {
      chartPanel1.style().set({shown: false});});
chartPanel1.add(Close)

// AND ADD THE CHART PANEL TO THE MAP
Map.add(chartPanel1)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SELECT A STATE FROM DROP DOWN SELECT WIDGET
var StateSelect = ui.Select({
  items: StateNames.getInfo(),
  placeholder: ('Select a State'),
  style: {width: '290px'},
  onChange: function getState(key) {
    //print(key)
    var selectedpolys = SE_Counties.filterMetadata('STATE_NAME','equals',key)
    var selectedCountyNames = selectedpolys.aggregate_array('COUNTY').sort()
    //print(selectedCountyNames)
    
    // FUNCTION TO ADD SELECTED COUNTY NAMES TO ITEMS (LIST) OF THE COUNTY SELECT WIDGET
    selectedCountyNames.evaluate(function(values) {
    CountySelect.items().reset(values);
    CountySelect.setValue(values[0], false);
})
    
    return key
  }
});

// SELECT A COUNTY FROM DROP DOWN SELECT WIDGET
var CountySelect = ui.Select({
  placeholder: ('Select a County'),
  style: {width: '290px'},
  onChange: function (value) {
    return value
  }
});

var bandSelect = ui.Select({
  onChange: function(value) {
    return value
  }
});

// Make a drop down menu of images.
var imageSelect = ui.Select({
  items: [
    {label: 'GRIDMET', value: GRIDMET},
    {label: 'DAYMET',  value: DAYMET}
  ],
  onChange: function(value) {
    
    var img = value.mean()
    // Asynchronously get the list of band names.
    img.bandNames().evaluate(function(bands) {
      // Display the bands of the selected image.
      bandSelect.items().reset(bands);
      // Set the first band to the selected band.
      bandSelect.setValue(bandSelect.items().get(0));
    });
  return value
  }
});

var dateSelect = ui.Select({
  items: dateList,
  placeholder: 'Select Time Range',
  onChange: function(value){
    datePanel.clear()
    
    var dateLabel = ui.Label({
    value: 'Selected Date Range...'
    })
    datePanel.add(dateLabel)

    var data = imageSelect.getValue()
    
    // DATE MANAGEMENT
    var startDate = value.start()
    // var startDate1 = startDate.advance(1,'day')
    // print(startDate1)
    var endDate = value.end()
    var startUTC = startDate.format(null,'UTC').slice(0,10)
    var endUTC = endDate.format(null,'UTC').slice(0,10)
    var startDateStr = ((((startUTC.slice(5,7)).cat('/')).cat(startUTC.slice(8,10))).cat('/')).cat(startUTC.slice(2,4))
    var endDateStr = ((((endUTC.slice(5,7)).cat('/')).cat(endUTC.slice(8,10))).cat('/')).cat(endUTC.slice(2,4))
    startDateStr.cat(' to ').cat(endDateStr).evaluate(function(val){dateLabel.setValue('From: ' + val)});
    return value
  }
})

//var Land_Bounds
var button = ui.Button({
  label: 'Get Time Series',
  onClick: function(){
  
  if (!chartPanel1.style().get('shown')) {
  chartPanel1.style().set('shown', true);
  }

  var selected = CountySelect.getValue()
  var county = ee.Feature(SE_Counties.filter(ee.Filter.eq('COUNTY', selected)).first())
  var data = imageSelect.getValue()
  var dateRange = dateSelect.getValue()
  var startDate = dateRange.start()
  var endDate = dateRange.end()
  var band = bandSelect.getValue()
  var IC = data.filterDate(startDate,endDate)
  
  // if (band == "MODIS Burned Area"){
  //   var chart = ui.Chart.image.seriesByRegion({
  //   imageCollection: IC,
  //   regions: county,
  //   reducer: ee.Reducer.sum(),
  //   band: band,
  //   scale: 500,
  //   xProperty: 'system:time_start',
  // //seriesProperty: 'COUNTY'
  // }).setOptions({
  // title: band+' in '+selected,
  // vAxis: {title: m.imgInfo.bands[bandSelect.getValue()].axistitle},
  // hAxis: {title: 'Date'},
  // legend: {position: 'none'}
  // })
  
  //} 
  
  //if (band != "MODIS Burned Area"){
    var chart = ui.Chart.image.seriesByRegion({
    imageCollection: IC,
    regions: county,
    reducer: ee.Reducer.mean(),
    band: band,
    scale: 4000,
    xProperty: 'system:time_start',
  //seriesProperty: 'COUNTY'
  }).setOptions({
  title: band+' in '+selected,
  vAxis: {title: m.imgInfo.bands[bandSelect.getValue()].axistitle},
  hAxis: {title: 'Date'},
  legend: {position: 'none'}
  })//.setChartType('ColumnChart')
  //}
  
  chartPanel1.clear().add(chart).add(Close)
  
  if (!c.legend.panel.style().get('shown')) {
  c.legend.panel.style().set('shown', true);
  }
  
  //c.legend.panel.style().set({shown: true})
  updateLegend()
  updateMap()

  }
})

function updateMap() {
  
  var selected = CountySelect.getValue()
  var county = ee.Feature(SE_Counties.filter(ee.Filter.eq('COUNTY', selected)).first())
  var data = imageSelect.getValue()
  var dateRange = dateSelect.getValue()
  var startDate = dateRange.start()
  var endDate = dateRange.end()
  var band = bandSelect.getValue()//.c.selectBand.selector.getValue();
  
  // SELECTED COUNTY LAYER PROPERTIES
  var shown = true
  var opacity = 0.5
  var Land_Bounds = ui.Map.Layer(county, {color: 'black'}, 'County Selection', shown, opacity)
  Map.centerObject(county,9)
  
  var IC = data.filterDate(startDate,endDate)
  var IC_out = IC.mean().clip(SE_AOI).select(band)
  
  var params = IC_out.reduceRegion({
    reducer: ee.Reducer.percentile([5, 95]), 
    geometry: county.geometry(), 
    scale: Map.getScale(),
  });
  
  print(params)

  var layer = ui.Map.Layer(
    IC_out, m.imgInfo.bands[band].vis, band);
  Map.layers().set(0, layer);
  Map.layers().set(1, Land_Bounds)
}


// Handles drawing the legend when band selector changes.
function updateLegend() {
  c.legend.title.setValue(bandSelect.getValue())
  c.legend.colorbar.setParams({
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: 1,
    palette: m.imgInfo.bands[bandSelect.getValue()].vis.palette
  });
  c.legend.leftLabel.setValue(
    m.imgInfo.bands[bandSelect.getValue()].vis.min);
  c.legend.centerLabel.setValue(
    m.imgInfo.bands[bandSelect.getValue()].vis.max / 2);
  c.legend.rightLabel.setValue(
    m.imgInfo.bands[bandSelect.getValue()].vis.max);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UI PANEL SECTION

//Create master panel in which to arrange widgets
var panel = ui.Panel({style: {width: '320px'}})
    .add(ui.Label({
    value: 'GRIDMET Summary Tool', //create title for whole UI
    style: {fontWeight: 'bold', fontSize: '22px', color: '#228B22'}
    })
  );

  
//BEGIN call functions to create user interface//
panel.add(ui.Label('1) Select Area of Interest', {fontWeight: 'bold'})) 
panel.add(StateSelect)
panel.add(CountySelect)


panel.add(ui.Label('2) Select Dataset of Interest',{fontWeight: 'bold'}))
panel.add(imageSelect);
panel.add(bandSelect);

panel.add(ui.Label('3) Select Temporal Period of Interest',{fontWeight: 'bold'}))
panel.add(dateSelect)

var datePanel = ui.Panel({style: {backgroundColor: colors.transparent}});
panel.add(datePanel)




panel.add(ui.Label('4) Get Time Series Chart',{fontWeight: 'bold'}))
panel.add(button)



ui.root.add(panel); //add panel to root
//END call functions to create user interface//



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

