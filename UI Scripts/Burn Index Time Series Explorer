/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var BurnUnitExample = ee.FeatureCollection("users/esimonson/ANF_BurnableVeg_Unit234"),
    geometry = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    LLL = ee.FeatureCollection("users/esimonson/AOIs/Longleaf_Legacy");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Map.setCenter(-84.20875, 30.6565, 12)

// Call in NAIP imagery for reference
var NAIP = ee.ImageCollection('USDA/NAIP/DOQQ')
  .filterBounds(LLL)
  .filterDate('2017-01-01','2017-11-30')
  .mosaic();
var visParams = {bands:['R', 'G', 'B']}
Map.addLayer(NAIP, visParams, 'High Resolution Reference Imagery');

// Function to cloud mask from the pixel_qa band of Landsat 8 SR data.
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
      .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  // Return the masked image, scaled to reflectance, without the QA bands.
  return image.updateMask(mask).divide(10000)
      .select("B[0-9]*")
      .copyProperties(image, ["system:time_start"]);
}

// Function to caluculate Normalized Burn Ratio (NBR) band for all images in the collection
var addNBR = function(image) {
  var nbr = image.normalizedDifference(['B5', 'B7']).rename('NBR');
  return image.addBands(nbr);
};

// Call the Landsat 8 Surface Reflectance collection, apply approrpiate filters
var L8_Collection = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR") 
  //.filterBounds(LLL)
  .filter(ee.Filter.eq('WRS_PATH', 18))
  .filter(ee.Filter.eq('WRS_ROW', 39))
  .filterMetadata('CLOUD_COVER', 'less_than', 80)
  //.map(maskL8sr)
  .map(addNBR)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CUSTOM DRAWING TOOLS
// 1. Get the drawing tools widget object; define it as a variable for convenience in recalling it later
var drawingTools = Map.drawingTools();

// 2. Hide the default drawing tools so you can add your own. You can use the default drawing tools for 
//    interactive region reduction, but they provide more functionality than is needed when simplicity is the goal
drawingTools.setShown(false);

// 3. Setup a while loop to clear all existing geometries that have been added as imports from drawing tools (from previously running the script) 
//    The design of the app is to handle charting a time series for a single geometry, so remove any that exist.
while (drawingTools.layers().length() > 0) {
  var layer = drawingTools.layers().get(0);
  drawingTools.layers().remove(layer);
}

// 4. Initialize a dummy GeometryLayer with null geometry to act as a placeholder for drawn geometries.
var dummyGeometry =
    ui.Map.GeometryLayer({geometries: null, name: 'geometry', color: '23cba7'});

drawingTools.layers().add(dummyGeometry);

// EVENT CALLBACK FUNCTIONS
//    Define a series of functions that are called when geometry drawing buttons are clicked: one for clearing the previous geometry from the 
//    GeometryLayer and one for each drawing mode button (rectangle, polygon, and point)
// 1. Define the geometry clearing function
function clearGeometry() {
  var layers = drawingTools.layers();
  layers.get(0).geometries().remove(layers.get(0).geometries().get(0));
}

// 2. Define functions that will be called when each respective drawing button is clicked. Each function will clear previous drawings using the 
//    clearGeometry function and then initialize drawing for the particular drawing mode
function drawRectangle() {
  clearGeometry();
  drawingTools.setShape('rectangle');
  drawingTools.draw();
}

function drawPolygon() {
  clearGeometry();
  drawingTools.setShape('polygon');
  drawingTools.draw();
}

function drawPoint() {
  clearGeometry();
  drawingTools.setShape('point');
  drawingTools.draw();
}

// REGIONAL TIME SERIES CHART 
// 1. Define a panel to hold the time series chart. Set the shown style parameter to false to initially hide the panel until the first chart is rendered
var chartPanel = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'bottom-right', shown: false}
});

// 2. Add the panel to the Map
Map.add(chartPanel);

// 3. Define a function that gets called on geometry drawing completion and editing events to generate an NBR time series chart for the drawn region. 
//    See code comments for an explanation of each step. In summary, the function shows the chart panel on the first drawing event, clears previously 
//    rendered charts, gets the drawn geometry, calculates the region reduction scale based on the Map scale, and renders a chart in the chart panel.
function chartNdviTimeSeries() {
  // Make the chart panel visible the first time a geometry is drawn.
  if (!chartPanel.style().get('shown')) {
    chartPanel.style().set('shown', true);
  }

  // Get the drawn geometry; it will define the reduction region.
  var aoi = drawingTools.layers().get(0).getEeObject();

  // Set the drawing mode back to null; turns drawing off.
  drawingTools.setShape(null);

  // Reduction scale is based on map scale to avoid memory/timeout errors.
  var mapScale = Map.getScale();
  var scale = mapScale > 5000 ? mapScale * 2 : 5000;

  // Chart NDVI time series for the selected area of interest.
  // var chart = ui.Chart.image
  //                 .seriesByRegion({
  //                   imageCollection: L8_Collection,
  //                   regions: aoi,
  //                   reducer: ee.Reducer.mean(),
  //                   band: 'NBR',
  //                   scale: 30,
  //                   xProperty: 'system:time_start'
  //                 })
  //                 .setOptions({
  //                   titlePostion: 'none',
  //                   legend: {position: 'none'},
  //                   hAxis: {title: 'Date'},
  //                   vAxis: {title: 'NDVI (x1e4)'},
  //                   series: {0: {color: '23cba7'}}
  //                 });
      var chart = ui.Chart.image.series(
      L8_Collection.select(['NBR']), aoi, ee.Reducer.mean(), 30)
        .setSeriesNames(['NBR'])
        .setOptions({
          title: 'NBR Time Series',
          lineWidth: 1,
          pointSize: 3,
    });
  // Replace the existing chart in the chart panel with the new chart.
  chartPanel.widgets().reset([chart]);
}

// 4. Set the drawing tools widget to listen for geometry drawing and editing events and respond with the chartNdviTimeSeries function.
// Note that ui.util.debounce wraps the chartNdviTimeSeries function to reduce the frequency of it being invoked while drawing and editing a geometry. 
// Here, the delay is set to 500 milliseconds or 0.5 seconds.
drawingTools.onDraw(ui.util.debounce(chartNdviTimeSeries, 500));
drawingTools.onEdit(ui.util.debounce(chartNdviTimeSeries, 500));

// USER INTERFACE
// This section defines the drawing control panel, which contains instructions and drawing tool buttons.
// 1. Define a dictionary of symbols to augment the text label for each of the geometry buttons defined in the following step. 
// The symbols are kept separate from the text to avoid unexpected cursor behavior when mixing symbols and text.
var symbol = {
  rectangle: '‚¨õ',
  polygon: 'üî∫',
  point: 'üìç',
};

// 2. Define a ui.Panel to hold app instructions and the geometry drawing buttons. Use a ui.Label for each instruction line and a ui.Button
// for each of the three geometry drawing options. Button labels are the concatenation of the symbols defined in the previous step and text. 
// Set the onClick parameter to each respective drawing mode callback function defined above.
var controlPanel = ui.Panel({
  widgets: [
    ui.Label('Generate Burn Scar Index Time Series Chart', 
  {fontWeight: 'bold', fontSize: '14px', margin: '10px 5px'}),
    ui.Label('1. Select a drawing mode.'),
    ui.Button({
      label: symbol.rectangle + ' Rectangle',
      onClick: drawRectangle,
      style: {stretch: 'horizontal'}
    }),
    ui.Button({
      label: symbol.polygon + ' Polygon',
      onClick: drawPolygon,
      style: {stretch: 'horizontal'}
    }),
    ui.Button({
      label: symbol.point + ' Point',
      onClick: drawPoint,
      style: {stretch: 'horizontal'}
    }),
    ui.Label('2. Draw a geometry.'),
    ui.Label('3. Wait for chart to render.'),
    ui.Label(
        '4. Repeat 1-3 or edit/move geometry\n    for a new chart.',
        {whiteSpace: 'pre'})
  ],
  style: {position: 'bottom-left'},
  layout: null,
});

// 3. Add the panel to the Map.
Map.add(controlPanel);

// Add the Burn Unit Example to Map
var shown = true; // true or false, 1 or 0
var opacity = 0.2; // number [0-1]
Map.addLayer(BurnUnitExample, {color:'red'}, 'ANF Burnable Vegtation', shown, opacity)
Map.centerObject(BurnUnitExample)